{"version":3,"file":"compile-source-files.js","sourceRoot":"","sources":["../../../src/lib/ngc/compile-source-files.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ng from '@angular/compiler-cli';\nimport * as ts from 'typescript';\nimport * as log from '../util/log';\nimport { createEmitCallback } from './create-emit-callback';\nimport { redirectWriteFileCompilerHost } from '../ts/redirect-write-file-compiler-host';\nimport { cacheCompilerHost } from '../ts/cache-compiler-host';\nimport { StylesheetProcessor } from '../ng-v5/entry-point/resources/stylesheet-processor';\nimport { BuildGraph } from '../brocc/build-graph';\nimport { EntryPointNode } from '../ng-v5/nodes';\n\nexport async function compileSourceFiles(\n  graph: BuildGraph,\n  entryPoint: EntryPointNode,\n  tsConfig: ng.ParsedConfiguration,\n  moduleResolutionCache: ts.ModuleResolutionCache,\n  stylesheetProcessor: StylesheetProcessor,\n  extraOptions?: Partial<ng.CompilerOptions>,\n  declarationDir?: string\n) {\n  log.debug(`ngc (v${ng.VERSION.full})`);\n\n  const tsConfigOptions: ng.CompilerOptions = { ...tsConfig.options, ...extraOptions };\n\n  let tsCompilerHost = cacheCompilerHost(\n    graph,\n    entryPoint,\n    tsConfigOptions,\n    moduleResolutionCache,\n    stylesheetProcessor\n  );\n  if (declarationDir) {\n    tsCompilerHost = redirectWriteFileCompilerHost(tsCompilerHost, tsConfigOptions.basePath, declarationDir);\n  }\n\n  // ng.CompilerHost\n  const ngCompilerHost = ng.createCompilerHost({\n    options: tsConfigOptions,\n    tsHost: tsCompilerHost\n  });\n\n  const emitFlags = tsConfigOptions.declaration ? tsConfig.emitFlags : ng.EmitFlags.JS;\n\n  const scriptTarget = tsConfigOptions.target;\n  const cache = entryPoint.cache;\n  const oldProgram = cache.oldPrograms && (cache.oldPrograms[scriptTarget] as ng.Program | undefined);\n\n  const ngProgram = ng.createProgram({\n    rootNames: tsConfig.rootNames,\n    options: tsConfigOptions,\n    host: ngCompilerHost,\n    oldProgram\n  });\n\n  await ngProgram.loadNgStructureAsync();\n\n  log.debug(\n    `ngc program structure is reused: ${\n      oldProgram ? (oldProgram.getTsProgram() as any).structureIsReused : 'No old program'\n    }`\n  );\n\n  cache.oldPrograms = { ...cache.oldPrograms, [scriptTarget]: ngProgram };\n\n  const allDiagnostics = [\n    ...ngProgram.getNgOptionDiagnostics(),\n    ...ngProgram.getTsSyntacticDiagnostics(),\n    ...ngProgram.getTsSemanticDiagnostics(),\n    ...ngProgram.getNgSemanticDiagnostics(),\n    ...ngProgram.getNgStructuralDiagnostics()\n  ];\n\n  // if we have an error we don't want to transpile.\n  const hasError = ng.exitCodeFromResult(allDiagnostics) > 0;\n  if (!hasError) {\n    // certain errors are only emitted by a compilation hence append to previous diagnostics\n    const { diagnostics } = ngProgram.emit({\n      emitCallback: createEmitCallback(tsConfigOptions),\n      emitFlags\n    });\n\n    allDiagnostics.push(...diagnostics);\n  }\n\n  if (allDiagnostics.length === 0) {\n    return;\n  }\n\n  const exitCode = ng.exitCodeFromResult(allDiagnostics);\n  const formattedDiagnostics = ng.formatDiagnostics(allDiagnostics);\n  if (exitCode !== 0) {\n    throw new Error(formattedDiagnostics);\n  } else {\n    log.msg(formattedDiagnostics);\n  }\n}\n"]}